{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3080\nCUDA_HOME: /usr/local/cuda-11.2\nNVCC: Cuda compilation tools, release 11.2, V11.2.67\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.10.0+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.0+cu111\nOpenCV: 4.7.0\nMMCV: 1.7.1\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMDetection: 2.28.1+", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=1,\n    workers_per_gpu=1,\n    train=dict(\n        type='CocoDataset',\n        ann_file='balloon/train/coco.json',\n        img_prefix='balloon/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ],\n        classes=('balloon', )),\n    val=dict(\n        type='CocoDataset',\n        ann_file='balloon/val/coco.json',\n        img_prefix='balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file='balloon/val/coco.json',\n        img_prefix='balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[16, 22])\nrunner = dict(type='EpochBasedRunner', max_epochs=24)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'mask_rcnn_r50_fpn_2x_coco_bbox_mAP-0.392__segm_mAP-0.354_20200505_003907-3e542a40.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nwork_dir = './work_dirs/mask_rcnn_balloon'\nauto_resume = False\ngpu_ids = range(0, 1)\n", "seed": 1996869423, "exp_name": "mask_rcnn_balloon.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 2503, "data_time": 0.0479, "loss_rpn_cls": 0.05532, "loss_rpn_bbox": 0.01736, "loss_cls": 0.29758, "acc": 87.82031, "loss_bbox": 0.33106, "loss_mask": 0.78143, "loss": 1.48275, "time": 0.15529}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 0.00242, "bbox_mAP": 0.6007, "bbox_mAP_50": 0.8128, "bbox_mAP_75": 0.7739, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4872, "bbox_mAP_l": 0.6684, "bbox_mAP_copypaste": "0.6007 0.8128 0.7739 0.0000 0.4872 0.6684", "segm_mAP": 0.6935, "segm_mAP_50": 0.8128, "segm_mAP_75": 0.7847, "segm_mAP_s": 0.0, "segm_mAP_m": 0.5771, "segm_mAP_l": 0.7673, "segm_mAP_copypaste": "0.6935 0.8128 0.7847 0.0000 0.5771 0.7673"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00442, "memory": 2503, "data_time": 0.04864, "loss_rpn_cls": 0.01363, "loss_rpn_bbox": 0.02188, "loss_cls": 0.09276, "acc": 96.49609, "loss_bbox": 0.14345, "loss_mask": 0.11669, "loss": 0.3884, "time": 0.15416}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.00486, "bbox_mAP": 0.5873, "bbox_mAP_50": 0.8536, "bbox_mAP_75": 0.8084, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4614, "bbox_mAP_l": 0.6559, "bbox_mAP_copypaste": "0.5873 0.8536 0.8084 0.0000 0.4614 0.6559", "segm_mAP": 0.703, "segm_mAP_50": 0.8536, "segm_mAP_75": 0.8349, "segm_mAP_s": 0.0, "segm_mAP_m": 0.5377, "segm_mAP_l": 0.7936, "segm_mAP_copypaste": "0.7030 0.8536 0.8349 0.0000 0.5377 0.7936"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00685, "memory": 2503, "data_time": 0.048, "loss_rpn_cls": 0.01577, "loss_rpn_bbox": 0.01853, "loss_cls": 0.10393, "acc": 96.04297, "loss_bbox": 0.13012, "loss_mask": 0.08839, "loss": 0.35674, "time": 0.15485}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.00729, "bbox_mAP": 0.6364, "bbox_mAP_50": 0.8186, "bbox_mAP_75": 0.7615, "bbox_mAP_s": 0.3535, "bbox_mAP_m": 0.5049, "bbox_mAP_l": 0.6977, "bbox_mAP_copypaste": "0.6364 0.8186 0.7615 0.3535 0.5049 0.6977", "segm_mAP": 0.6638, "segm_mAP_50": 0.8186, "segm_mAP_75": 0.7633, "segm_mAP_s": 0.0673, "segm_mAP_m": 0.4996, "segm_mAP_l": 0.74, "segm_mAP_copypaste": "0.6638 0.8186 0.7633 0.0673 0.4996 0.7400"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.00929, "memory": 2503, "data_time": 0.04841, "loss_rpn_cls": 0.01877, "loss_rpn_bbox": 0.02425, "loss_cls": 0.12539, "acc": 95.25, "loss_bbox": 0.16791, "loss_mask": 0.13132, "loss": 0.46764, "time": 0.15351}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.00973, "bbox_mAP": 0.3488, "bbox_mAP_50": 0.5601, "bbox_mAP_75": 0.376, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.28, "bbox_mAP_l": 0.4111, "bbox_mAP_copypaste": "0.3488 0.5601 0.3760 0.0000 0.2800 0.4111", "segm_mAP": 0.3975, "segm_mAP_50": 0.56, "segm_mAP_75": 0.4284, "segm_mAP_s": 0.0, "segm_mAP_m": 0.172, "segm_mAP_l": 0.4775, "segm_mAP_copypaste": "0.3975 0.5600 0.4284 0.0000 0.1720 0.4775"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.01173, "memory": 2503, "data_time": 0.04882, "loss_rpn_cls": 0.04363, "loss_rpn_bbox": 0.03661, "loss_cls": 0.15149, "acc": 94.76562, "loss_bbox": 0.18216, "loss_mask": 0.24801, "loss": 0.66191, "time": 0.15631}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.01217, "bbox_mAP": 0.2979, "bbox_mAP_50": 0.5005, "bbox_mAP_75": 0.34, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.3534, "bbox_mAP_l": 0.3188, "bbox_mAP_copypaste": "0.2979 0.5005 0.3400 0.0000 0.3534 0.3188", "segm_mAP": 0.3753, "segm_mAP_50": 0.5174, "segm_mAP_75": 0.4306, "segm_mAP_s": 0.0, "segm_mAP_m": 0.3256, "segm_mAP_l": 0.4174, "segm_mAP_copypaste": "0.3753 0.5174 0.4306 0.0000 0.3256 0.4174"}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.01417, "memory": 2503, "data_time": 0.0482, "loss_rpn_cls": 0.08322, "loss_rpn_bbox": 0.03629, "loss_cls": 0.17929, "acc": 94.36328, "loss_bbox": 0.15509, "loss_mask": 0.22377, "loss": 0.67766, "time": 0.15297}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.01461, "bbox_mAP": 0.3848, "bbox_mAP_50": 0.6297, "bbox_mAP_75": 0.4348, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.1319, "bbox_mAP_l": 0.4695, "bbox_mAP_copypaste": "0.3848 0.6297 0.4348 0.0000 0.1319 0.4695", "segm_mAP": 0.4529, "segm_mAP_50": 0.6282, "segm_mAP_75": 0.528, "segm_mAP_s": 0.0, "segm_mAP_m": 0.1099, "segm_mAP_l": 0.5627, "segm_mAP_copypaste": "0.4529 0.6282 0.5280 0.0000 0.1099 0.5627"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.0166, "memory": 2942, "data_time": 0.04705, "loss_rpn_cls": 0.07573, "loss_rpn_bbox": 0.04398, "loss_cls": 0.1385, "acc": 95.4375, "loss_bbox": 0.16221, "loss_mask": 0.20896, "loss": 0.62937, "time": 0.15199}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.01704, "bbox_mAP": 0.4009, "bbox_mAP_50": 0.6132, "bbox_mAP_75": 0.4533, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.1368, "bbox_mAP_l": 0.5011, "bbox_mAP_copypaste": "0.4009 0.6132 0.4533 0.0000 0.1368 0.5011", "segm_mAP": 0.4625, "segm_mAP_50": 0.6357, "segm_mAP_75": 0.5207, "segm_mAP_s": 0.0, "segm_mAP_m": 0.1416, "segm_mAP_l": 0.5817, "segm_mAP_copypaste": "0.4625 0.6357 0.5207 0.0000 0.1416 0.5817"}
